#!/usr/bin/env python
print "importing libraries"
import sm
import kalibr_common as kc
from kalibr_imu_camera_calibration import *

import numpy as np
import argparse
import signal
import sys   

# make numpy print prettier
np.set_printoptions(suppress=True)

def signal_exit(signal, frame):
    print
    sm.logWarn("Shutting down! (CTRL+C)")
    sys.exit(1)

#helper to constrain certain arguments to be specified only once
class Once(argparse.Action):
    def __call__(self, parser, namespace, values, option_string = None):
        if getattr(namespace, self.dest) is not None:
            msg = '{o} can only be specified once'.format(o = option_string)
            raise argparse.ArgumentError(None, msg)
        setattr(namespace, self.dest, values)

def parseArgs():
    class KalibrArgParser(argparse.ArgumentParser):
        def error(self, message):
            self.print_help()
            sm.logError('%s' % message)
            sys.exit(2)
        def format_help(self):
            formatter = self._get_formatter()
            formatter.add_text(self.description)
            formatter.add_usage(self.usage, self._actions,
                                self._mutually_exclusive_groups)
            for action_group in self._action_groups:
                formatter.start_section(action_group.title)
                formatter.add_text(action_group.description)
                formatter.add_arguments(action_group._group_actions)
                formatter.end_section()
            formatter.add_text(self.epilog)
            return formatter.format_help()     
        
    usage = """
    Example usage to calibrate a camera system against an IMU using an aprilgrid
    with temporal calibration enabled.
    
    %(prog)s --bag MYROSBAG.bag --cam camchain.yaml --imu imu.yaml \\
             --target aprilgrid.yaml --time-calibration
    
    camchain.yaml: is the camera-system calibration output of the multiple-camera
                   calibratin tool (kalibr_calibrate_cameras)
    
    example aprilgrid.yaml:       |  example imu.yaml: (ADIS16448)
        target_type: 'aprilgrid'  |      accelerometer_noise_density: 0.006  
        tagCols: 6                |      accelerometer_random_walk: 0.0002
        tagRows: 6                |      gyroscope_noise_density: 0.0004
        tagSize: 0.088            |      gyroscope_random_walk: 4.0e-06
        tagSpacing: 0.3           |      update_rate: 200.0"""    

    #setup the argument list
    parser = KalibrArgParser(description='Simulate rolling shutter camera measurements and inertial readings.', usage=usage)
        
    #configuration files
    groupCam = parser.add_argument_group('Camera system configuration')
    groupCam.add_argument('--cams', dest='chain_yaml', help='Camera system configuration as yaml file', required=True, action=Once)
    groupCam.add_argument('--recompute-camera-chain-extrinsics',  action='store_true', dest='recompute_chain_extrinsics', \
                          help='Recompute the camera chain extrinsics. This option is exclusively recommended for debugging purposes in order to identify problems with the camera chain extrinsics.')
    groupCam.add_argument('--reprojection-sigma', type=float, default=1.0, dest='reprojection_sigma', help='Standard deviation of the distribution of reprojected corner points [px]. (default: %(default)s)', required=False)
    
    groupImu = parser.add_argument_group('IMU configuration')
    groupImu.add_argument('--imu', dest='imu_yamls', nargs='+', help='Yaml files holding the IMU noise parameters. The first IMU will be the reference IMU.', required=False, action=Once)
    groupImu.add_argument('--imu-delay-by-correlation', action='store_true', dest='estimate_imu_delay', \
                          help='Estimate the delay between multiple IMUs by correlation. By default, no temporal calibration between IMUs will be performed.', required=False)      
    groupImu.add_argument('--imu-models', nargs='+', dest='imu_models', help='The IMU models to estimate. Currently supported are \'calibrated\', \'scale-misalignment\' and \'scale-misalignment-size-effect\'.', action=Once)
    
    groupTarget = parser.add_argument_group('Calibration target')
    groupTarget.add_argument('--target', dest='target_yaml', help='Calibration target configuration as yaml file', required=True, action=Once)
    
    #simulation options
    groupSim = parser.add_argument_group('Simulation options')
    groupCam.add_argument('--model-file', dest='model_txt', help='The B spline knot coefficients of the sample motion as a txt file, e.g., knotCoeffT.txt', required=True, action=Once)
    groupSim.add_argument('--time-offset', type=float, default=0.0, dest='time_offset', help='Time offset between camera and inertial measurements, raw timestamp of frame i + time offset = time of frame i in imu clock [s] (default: %(default)s)', required=False)
    groupSim.add_argument('--time-readout', type=float, default=30e-3, dest='time_readout', help='Read out time of a full frame [s] (default: %(default)s)', required=False)
    groupSim.add_argument('--frame-rate', type=int, default=30, dest='camera_frame_rate', help='Frame rate of the camera [1] (default: %(default)s)', required=False)
    
    #Result options
    outputSettings = parser.add_argument_group('Output options')    
    outputSettings.add_argument('--verbose', action='store_true', dest='verbose', help='Verbose output (disables plots)')
    outputSettings.add_argument('--dont-show-report', action='store_true', dest='dontShowReport', help='Do not show the report on screen after calibration.')    
     
    #print help if no argument is specified
    if len(sys.argv)==1:
        parser.print_help()
        sys.exit(2)
    
    #Parser the argument list
    try:
        parsed = parser.parse_args()
    except:
        sys.exit(2)                 
   
    #there is a with the gtk plot widget, so we cant plot if we have opencv windows open...
    #--> disable the plots in these special situations
    if parsed.verbose:
        parsed.dontShowReport = True
    
    return parsed

def main():
    # Parse the arguments
    parsed = parseArgs();
    modelFile = parsed.model_txt
    targetFile = parsed.target_yaml
    camChainYaml = parsed.chain_yaml

    print "Test loading the model and generate sample data "    
    util.simulateRsVisualInertialMeasViaBspline(modelFile, targetFile, camChainYaml, parsed.time_offset, parsed.time_readout)
    print "Finished generating sample test"   
    print

if __name__ == "__main__": 
    main()
